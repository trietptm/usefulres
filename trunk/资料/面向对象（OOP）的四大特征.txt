面向对象（OOP）的四大特征：
抽象：我的工程应该有哪些类--我们通过观察数据库设计，可以帮助我们找到类
封装：自己的事情自己做，不要过多的暴露自己内部的事情
继承：类与类之间的兼容关系，事物之间的关系不只是平级关系，还有抽象与具体的关系（笼统和清晰的关系),他们之间是兼容的
多态: 一个方法，对应多种实现方式（多种形态），调用一个方法时，应能智能准确的调用

为什么要使用类：因为把有规律的东西压成模板，能简化开发，是一种技巧，能按人的逻辑进行组织代码
为什么使用static：因为在一种事物中（一个类)，有些是公共的特征（例如人类的总数)，有些特征是因人而异的(某人的身高),我们把公共的特征和行为标记为static，它不需要new（不需要依赖于new出一个 个体)就能使用
为什么要使用构造函数：为了避免必要的原材料缺失
为什么要使用函数重载：把方便留给客户，多种类似的业务，不要提供太多的服务窗口
为什么使用属性(get set):是变形的方法：用起来像字段，实际上是方法 ，这种方法的功能主要提供内部数据的过滤（像数据库的check约束一样）
为什么使用索引器：也是变形的方法，有机会给大家使用[]的语法
 
为什么使用常量（const)  因为工程中统一管理固定的约定值，会有条理
为什么使用枚举（enum)   因为表达几个状态，用可选项的方式更好，必须在其中选其一
为什么要使用结构(struct) 因为学习了堆栈图后，知道struct不需要按线索行事，体积小时效率高，但要谨慎用它，因为容易有装拆箱的问题，内嵌类时还会混乱，体积大时没有效率
为什么要了解装拆箱：因为装箱是自动的，希望大家尽量避免装拆箱，而不是让大家学习如何装拆箱
为什么集合（List，ArrayList):因为数组长度不好管理，我们需要动态增长的数组
为什么首选泛型集合（List<>):因为ArrayList是垃圾筒，而且对值类型提供的服务不到位(需要装拆箱)
为什么选择字典：因为List集合查找速度慢，有频繁查找的情况要考虑字典集合，但注意其中分keys 和Values集合，要绑定还要转换一下
为什么要用XML传输数据：因为xml格式可以把文本文件表达清楚层次感，要在经过公网获取数据，直连数据库来获取数据是很危险，由服务端把数据搜出来，通过清晰的xml表达方式再把文件传给对方解析
为什么要用Xml配置数据：因为用文本文件，表达太简陋，一旦许多东西要配置，就混乱，所以利用xml能清晰的表达的能力
为什么使用IO流来存取数据：因为不是什么都要动用数据库的，例如简单的信息保存
为什么要用序列化：就像重装电脑，使用ghost这种连皮带壳的方式比，普通的一个一个软件装的方式要好，别忘了普通的方式是先拆后装工作量很大
为什么要用序列化传输数据：简单，高效，整体保存，整体还原
为社么有的时候要用XML而不用序列化的方式传输数据：因为序列化技术中，传输双方都要约定使用共同的类来保存和还原数据，导致了部署上的特殊要求，以及只能用于同一平台，xml虽然低效，但没有这些缺点
为什么要使用反射：反射是透视机，不仅能够看到程序集及类内部的结构，而且能够通过基因type来克隆出对象，令我们可以凭空的使用一个程序集和类（通过路径字符串和类名字符串即可），而无需在工程中事先导入，在不方便导入的情况下，发挥着不可替代的作用
为什么要使用继承：继承描述的是类与类之间的兼容关系，使用继承能帮助我们分解复杂的问题:我们的问题一旦复杂，我们解决的方式是分类处理，逐项攻破，继承就是个笼统的问题，分门别类成具体的问题（子类),还复杂就继续细化，这种分解就是继承的使用
为什么需要多态：我们发现继承仅仅是解决了兼容关系，兼容导致多个类可以混在同一个集合中，但是当你发号施令时，不代表每个类对象都知道要调用自己的方法。（如果不能准确调用各自因人而异的方法，那么兼容就毫无意义），所以我们使用多态的语法来解决自动调用的问题