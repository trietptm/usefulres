/*****************************************************************************
 * zip.hsl - Structure definitions for the .zip file format
 * libraries.
 *  
 * Copyright (c) 2003-2008 BreakPoint Software, Inc.  All Rights Reserved
 *
 *****************************************************************************
 * Revision History:
 *  05/01/03 - RJA - Original
 *  03/20/04 - RJA - Added #pragma verifies
 *  09/11/08 - RJA - Updated based on September 28, 2007 APPNOTE.TXT for PKZIP
 */

#include "standard-types.hsl"

#pragma displayname("zip structures")
#pragma fileextensions(".zip;.jar")

#pragma byteorder(little_endian)

// ZIP uses 2 bytes for their version field
#pragma enumsize(2)
#pragma enumsign("unsigned")
typedef enum tagVERSION_MADE_BY
{
    DOS_OS2         = 0,
    AMIGA           = 1,
    OpenVMS         = 2,
    UNIX            = 3,
    VM_CMS          = 4,
    ATARI_ST        = 5,
    OS2_HPFS        = 6,
    MACINTOSH       = 7,
    Z_SYSTEM        = 8,
    CPM             = 9
    WINDOWS_NTFS    = 10,
    MVS             = 11,
    VSE             = 12,
    ACORN_RISC      = 13,
    VFAT            = 14,
    ALTERNATIVE_MVS = 15,
    BEOS            = 16,
    TANDEM          = 17,
    OS_400          = 18,
    DARWIN          = 19
} VERSION_MADE_BY ; 

// Zip uses 2 bytes for their compression method field
#pragma enumsize(2)
#pragma enumsign("unsigned")
typedef enum tagCOMPRESSION_METHOD
{
    STORED           = 0,
    SHRUNK           = 1,
    REDUCED_FACTOR_1 = 2,
    REDUCED_FACTOR_2 = 3,
    REDUCED_FACTOR_3 = 4,
    REDUCED_FACTOR_4 = 5,
    IMPLODED         = 6,
    TOKENZIED        = 7,
    DEFLATED         = 8,
    DEFLATE64        = 9,
    LIB_IMPLODE      = 10,
    RESERVED         = 11,
    BZIP2            = 12,
    RESERVED         = 13,
    LZMA             = 14,
    RESERVED         = 15,
    RESERVED         = 16,
    RESERVED         = 17,
    IBM_TERSE        = 18,
    IBM_LZ77_PFS     = 19,
    WAVPACK          = 97,
    PPMD_VER_I_REV_1 = 98    
} COMPRESSION_METHOD;

struct LocalFileHeader
{
    char Signature[4] ; // 504b0304
#pragma verify match_var_int("Signature[0]", "0x50")
#pragma verify match_var_int("Signature[1]", "0x4B")
#pragma verify match_var_int("Signature[2]", "0x03")
#pragma verify match_var_int("Signature[3]", "0x04")
    WORD VersionNeededToExtract ;
    WORD GeneralPurposeBitFlag ;
    COMPRESSION_METHOD CompressionMethod ;
    DOSTIME LastModFileTime ;
    DOSDATE LastModFileDate ;
    DWORD Crc32 ;
    DWORD CompressedSize ;
    DWORD UncompressedSize ;
    WORD  FileNameLength ;
    WORD  ExtraFieldLength ;
    char  FileName[FileNameLength] ;
    blob  ExtraField[ExtraFieldLength] ;
    blob  FileData[CompressedSize] ;
} ;

struct DataDescriptor
{
    DWORD Crc32 ;
    DWORD CompressedSize ;
    DWORD UncompressedSize ;
} ;

struct ZIP64DataDescriptor
{
    DWORD Crc32 ;
    QUAD CompressedSize ;
    QUAD UncompressedSize ;
} ;

struct ArchiveExtraData
{
    char Signature[4] ;    // 504b0608
#pragma verify match_var_int("Signature[0]", "0x50")
#pragma verify match_var_int("Signature[1]", "0x4B")
#pragma verify match_var_int("Signature[2]", "0x06")
#pragma verify match_var_int("Signature[3]", "0x08")
    DWORD length ;
    blob data[length] ;
} ;

struct EndOfCentralDirectory
{
    char Signature[4] ;    // 504b0506
#pragma verify match_var_int("Signature[0]", "0x50")
#pragma verify match_var_int("Signature[1]", "0x4B")
#pragma verify match_var_int("Signature[2]", "0x05")
#pragma verify match_var_int("Signature[3]", "0x06")
    WORD DiskNumber ;
    WORD CentralDirectoryStartDisk ;
    WORD CentralDirectoryStartOffset ;
    WORD NumEntries ;
    DWORD CentralDirectorySize ;
    DWORD CentralDirectoryOffset ;
    WORD ZipCommentLength ;
    char ZipComment[ZipCommentLength] ;
} ;

struct DigitalSignature
{
    char Signature[4] ;    // 504b0505
#pragma verify match_var_int("Signature[0]", "0x50")
#pragma verify match_var_int("Signature[1]", "0x4B")
#pragma verify match_var_int("Signature[2]", "0x05")
#pragma verify match_var_int("Signature[3]", "0x05")
    WORD SizeOfData ;
    blob content[SizeOfData] ;
} ;

struct CentralDirectoryFileHeader
{
    char Signature[4] ;    // 504b0102
#pragma verify match_var_int("Signature[0]", "0x50")
#pragma verify match_var_int("Signature[1]", "0x4B")
#pragma verify match_var_int("Signature[2]", "0x01")
#pragma verify match_var_int("Signature[3]", "0x02")
    VERSION_MADE_BY VersionMadeBy ;
    WORD VersionNeededToExtract ;
    WORD GeneralPurposeBitFlag ;
    COMPRESSION_METHOD CompressionMethod ;
    DOSTIME LastModFileTime ;
    DOSDATE LastModFileDate ;
    DWORD Crc32 ;
    DWORD CompressedSize ;
    DWORD UncompressedSize ;
    WORD  FileNameLength ;
    WORD  ExtraFieldLength ;
    WORD  FileCommentLength ;
    WORD  DiskNumberStart ;
    WORD  InternalFileAttributes ;
    DWORD ExternalFileAttributes ;
    DWORD RelativeOffsetOfLocalHeader ;

    char  FileName[FileNameLength] ;
    blob  ExtraField[ExtraFieldLength] ;
    char  FileComment[FileCommentLength] ;
} ;

struct ZIP64EndOfCentralDirectory
{
    char Signature[4] ;    // 504b0606
#pragma verify match_var_int("Signature[0]", "0x50")
#pragma verify match_var_int("Signature[1]", "0x4B")
#pragma verify match_var_int("Signature[2]", "0x06")
#pragma verify match_var_int("Signature[3]", "0x06")
    QUAD SizeOfCentralDirRecord ;
    VERSION_MADE_BY VersionMadeBy ;
    WORD VersionNeededToExtract ;
    DWORD DiskNumber ;
    DWORD StartCentralDirectoryDiskNumber ;
    QUAD CentralDirectoryEntriesOnDisk ;
    QUAD CentralDirectoryTotalEntries ;
    QUAD CentralDirectorySize ;
    QUAD CentralDirectoryOffsetStartDisk ;   
    // zip64 extensible data sector
} ;

struct ZIP64EndOfCentralDirectoryLocator
{
    char Signature[4] ;    // 504b0607
#pragma verify match_var_int("Signature[0]", "0x50")
#pragma verify match_var_int("Signature[1]", "0x4B")
#pragma verify match_var_int("Signature[2]", "0x06")
#pragma verify match_var_int("Signature[3]", "0x07")
    DWORD DiskNumber ;
    QUAD ZIP64RelativeOffset ;
    DWORD TotalNumDisks ;
} ;


/**
RecordTypeParser
{
    switch (ulongAt(__pos__)))
    {
    case 0x504B0102:
        AddStructure("CentralDirectoryFileHeader");
        break;
    case 0x504B0304:
        AddStructure("LocalFileHeader");
        break ;
    case 0x504b0505:
        AddStructure("DigitalSignature");
        break ;
    case 0x504b0506:
        AddStructure("EndOfCentralDirectory");
        break ;
    case 0x504b0606:
        AddStructure("ZIP64EndOfCentralDirectory");
        break ;
    case 0x504b0607:
        AddStructure("ZIP64EndOfCentralDirectoryLocator");
        break;
    case 0x504b0608:
        AddStructure("ArchiveExtraData");
        break ;
    default:
        break ;
}
**/
